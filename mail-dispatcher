#!/usr/bin/env node

// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

'use strict'

const commander = require('commander')
const fs = require('fs')
const MailDispatcher = require('./src/mail-dispatcher')

const bootstrap = (application, action) => {
  try {
    var configurationFile = application.configuration || __dirname + '/config.json'
    var configuration = JSON.parse(fs.readFileSync(configurationFile))
    var instance = new MailDispatcher(configuration, {
      silent: !!application.silent
    })

    action(instance)
  } catch(err) {
    console.error(err.message || err)
    return process.exit(1)
  }
}

var application = commander
  .version('0.0.1')

application
  .option('-c, --configuration [path]', 'Path to configuration file')
  .option('-s, --silent', 'Suppress all logging output')
  .option('-d, --debug', 'Include debugging and verbose output')

application
  .command('help')
  .description('Prints the application\'s help screen')
  .action(() => {
    application.help()
  })

application
  .command('clean')
  .description('Clean automatically created resources')
  .action(async () => {
    bootstrap(application, (instance) => {
      (async () => {
        try {
          await instance.clean()
        } catch (e) {
          console.error('Unhandled fatal error, manual check required. Exit')
          throw e;
        }
      })();
    });
  });

application
  .command('deploy')
  .description('Deploy latest version of configuration and mappings')
  .action(async () => {
    bootstrap(application, (instance) => {
      (async () => {
        try {
          await instance.deploy();
        } catch (e) {
          console.error('Unhandled fatal error, manual check required. Exit');
          throw e;
        }
      })();
    });
  });

application
.command('routes')
.description('Fully reset mailgun routes')
.action(async () => {
  bootstrap(application, (instance) => {
    (async () => {
      try {
        await instance.routes();
      } catch (e) {
        console.error('Unhandled fatal error, manual check required. Exit');
        throw e;
      }
    })();
  });
});

application.parse(process.argv)